{"version":3,"sources":["components/TodoItem.js","components/TodosList.js","components/Header.js","components/InputTodo.js","components/TodoContainer.js","serviceWorker.js","index.js"],"names":["completedStyle","fontStyle","color","opacity","textDecoration","TodoItem","props","react_default","a","createElement","className","type","checked","todo","completed","onChange","handleChangeProps","id","onClick","deleteTodoProps","style","title","TodosList","_this","this","todos","map","components_TodoItem","key","Component","Header","InputTodo","state","e","setState","target","value","onSubmit","preventDefault","alert","addTodoProp","placeholder","TodoContainer","uuidv4","handleChange","deleteTodo","Object","toConsumableArray","filter","addTodo","newTodo","concat","components_Header","components_InputTodo","components_TodosList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","components_TodoContainer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1c5b5477.chunk.js","sourcesContent":["import React  from 'react';\r\n\r\nconst completedStyle = {\r\n  fontStyle: \"italic\",\r\n  color: \"#d35e0f\",\r\n  opacity: 0.4,\r\n  textDecoration: \"line-through\",\r\n}\r\n\r\nconst TodoItem = (props) => (\r\n    (\r\n      <div>\r\n        <li className=\"todo-item\">\r\n          <input  \r\n            type= \"checkbox\" \r\n            checked ={props.todo.completed}\r\n            onChange = {()=> props.handleChangeProps(props.todo.id)} \r\n          />\r\n          <button onClick={()=> props.deleteTodoProps(props.todo.id)}>Delete</button>\r\n            <span style={props.todo.completed? completedStyle: null}>\r\n            {props.todo.title}  \r\n            </span>\r\n        </li>\r\n      </div>\r\n    )    \r\n);\r\n\r\nexport default TodoItem;","import React, {Component} from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nclass TodosList extends Component {\r\n  render() {\r\n      return(\r\n          <div>\r\n              {this.props.todos.map(todo =>(\r\n               <TodoItem \r\n               key ={todo.id} \r\n               todo={todo}\r\n               handleChangeProps ={this.props.handleChangeProps} \r\n               deleteTodoProps={this.props.deleteTodoProps}\r\n               />\r\n              ))}\r\n          </div>    \r\n      );\r\n  } \r\n}\r\n\r\nexport default TodosList;","import React from 'react';\r\n\r\n const Header = () => (\r\n      (\r\n       <header>\r\n           <h1 className=\"appName\"> A Todo App</h1>\r\n           <p className=\"enterInputText\"> Please use the input field to add to-dos item(s) </p>\r\n       </header>\r\n      )\r\n );\r\n\r\n export default Header;","import React, { Component } from \"react\";\r\n\r\nclass InputTodo extends Component {\r\n  state = {\r\n    title: \"\",\r\n  };\r\n\r\n  onChange = (e) => {\r\n    this.setState({\r\n      title: e.target.value,\r\n    });\r\n  };\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (this.state.title === \"\") {\r\n      alert(\"Your todo cannot be empty\");\r\n      return false;\r\n    } else{\r\n        this.props.addTodoProp(this.state.title);\r\n        this.setState({\r\n          title: \"\",\r\n        });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onSubmit} className=\"form-container\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"input-text\"\r\n          placeholder=\"Enter Todo\"\r\n          value={this.state.title}\r\n          onChange={this.onChange}\r\n        />\r\n        <input type = \"submit\"  className=\"input-submit\" value =\"submit\" />\r\n        {/* <button type=\"button\" className=\"input-submit\">\r\n          submit\r\n        </button> */}\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputTodo;\r\n","import React, { Component } from \"react\";\r\nimport {v4 as uuidv4} from \"uuid\";\r\nimport TodosList from \"./TodosList\";\r\nimport Header from \"./Header\";\r\nimport InputTodo from \"./InputTodo\";\r\n\r\nclass TodoContainer extends Component {\r\n  state = {\r\n    todos: [\r\n      {\r\n        id: uuidv4(),\r\n        title: \"Setup development environment\",\r\n        completed: true,\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        title: \"Develop website and add content\",\r\n        completed: false,\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        title: \"Deploy to live server\",\r\n        completed: false,\r\n      },\r\n    ],\r\n  };\r\n\r\n  handleChange = (id) => {\r\n    this.setState({\r\n      todos: this.state.todos.map((todo) => {\r\n        if (todo.id === id) {\r\n          todo.completed = !todo.completed;\r\n        }\r\n        return todo;\r\n      }),\r\n    });\r\n  };\r\n\r\n  deleteTodo = (id) => {\r\n    this.setState({\r\n      todos: [\r\n        ...this.state.todos.filter((todo) => {\r\n          return todo.id !== id;\r\n        }),\r\n      ],\r\n    });\r\n  };\r\n\r\n  addTodo = (title) => {\r\n    const newTodo = {\r\n      id: uuidv4(),\r\n      title: title,\r\n      completed: false, \r\n    };\r\n    this.setState({\r\n      todos: [...this.state.todos, newTodo],\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <Header />\r\n        <InputTodo addTodoProp={this.addTodo} />\r\n        <TodosList\r\n          todos={this.state.todos}\r\n          handleChangeProps={this.handleChange}\r\n          deleteTodoProps={this.deleteTodo}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoContainer;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport TodoContainer from './components/TodoContainer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TodoContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}